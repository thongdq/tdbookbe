JDBC, JDBC transaction, savepoint
- https://www.journaldev.com/2471/jdbc-example-mysql-oracle
- https://www.journaldev.com/2483/java-jdbc-transaction-management-savepoint

Spring transaction management
- https://www.journaldev.com/2471/jdbc-example-mysql-oracle
- https://www.marcobehler.com/guides/spring-transaction-management-transactional-in-depth

APO programing
- https://gpcoder.com/5112-gioi-thieu-aspect-oriented-programming-aop/

- there are 2 way to manage transaction in spring:
    + Programmatic transaction management: manual code
    + Declarative transaction management: using anotation @transaction, separate transaction management from the business code (preferable).

- The key to the Spring transaction abstraction is defined by the org.springframework.transaction.PlatformTransactionManager interface
- The key to the Hibernate transaction abstraction is defined by the HibernateTransactionManager interface.
- The key to the JPA transaction abstraction is defined by the JpaTransactionManager interface.
- We can integrate Spring transaction management and Hibernate/JPA transaction management.

- @Data
    + Lombok's @Data annotation on my model objects to auto-generate getters, setters, and other standard methods.
    + The toString() method might generated by Lombok introduced a circular dependency => java.lang.StackOverflowError